// Code generated by ent, DO NOT EDIT.

package ent

import "github.com/google/uuid"

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Age      int
	Name     *string
	CarIDs   []uuid.UUID
	GroupIDs []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetAge(i.Age)
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.CarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Age            *int
	Name           *string
	AddCarIDs      []uuid.UUID
	RemoveCarIDs   []uuid.UUID
	AddGroupIDs    []uuid.UUID
	RemoveGroupIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Age; v != nil {
		m.SetAge(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AddCarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
	if v := i.RemoveCarIDs; len(v) > 0 {
		m.RemoveCarIDs(v...)
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
